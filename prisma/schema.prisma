// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// added the collegeCode to nullable as optional and unique
// add the email for the unique key

// model Users{
//   id String @id @default(uuid())
//   collegeCode String? @unique 
//   userName String @unique
//   collegeName String @unique
//   phone String @unique
//   password String 
//   createdAt DateTime @default(now())
//   updateAt DateTime @updatedAt
//   email String @unique 
//   registrants Registrants[] @relation("UserRegistrants")

// }
// // do add the phone of each participant
// model Registrants{
//   id Int @id @default(autoincrement())
//   name String
//   usn String @unique
//   type type 
//   phone String @unique
//   events Json[] 
//   photoUrl String
//   aadharUrl String
//   sslcUrl String  
//   pucUrl String
//   admissionUrl String
//   idcardUrl  String
//   userId String
//   verified Boolean @default(false)
//   user Users @relation("UserRegistrants",fields: [userId],references: [id])
// }




model Users {
  id           String          @id @default(uuid())
  collegeCode  String?         @unique
  collegeName  String
  phone        String          @unique
  email        String          @unique
  password     String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  events       Events[]        
  registrants  Registrants[]
}

model Events {
  id                   String                  @id @default(uuid())
  eventNo              Int                     
  eventName            String
  userId                String
  registrants          Registrants[]           @relation("EventRegistrations")
  user         Users                  @relation(fields: [userId], references: [id])
  eventRegistrations   EventRegistrations[]

  @@unique([userId,eventNo])
}

model Registrants {
  id           String                 @id @default(uuid())
  name         String
  usn          String                 @unique
  type         Type
  phone        String                 @unique
  photoUrl     String
  aadharUrl    String
  sslcUrl      String
  pucUrl       String
  admissionUrl String
  idcardUrl    String
  userId       String
  verified     Boolean                @default(false)
  user         Users                  @relation(fields: [userId], references: [id])
  events       Events[]               @relation("EventRegistrations")
  eventRegistrations EventRegistrations[]
}

model EventRegistrations {
  id               String        @id @default(uuid())
  registrantId     String
  eventId          String 
  attendanceStatus Boolean       @default(false)
  prize            Int           @default(0)
  registrant       Registrants   @relation(fields: [registrantId], references: [id])
  event            Events        @relation(fields: [eventId], references: [id])
  @@unique([registrantId,eventId])
}

enum Type {
  PARTICIPANT
  TEAMMANAGER
  ACCOMPANIST
}